由ai生成框架信息：
项目目录/
├── main.go          // 项目入口：配置路由、启动服务
├── controllers/     // 控制器：处理请求、调用逻辑
├── models/          // 模型：数据库结构和操作
├── utils/           // 工具类：加密、解密等功能函数
├── storage/uploads/ // 保存上传的图片

内部逻辑为：
main.go
   ↓ 注册路由
controllers/encrypt.go
   ↓ 调 utils.Encrypt(data)
utils/crypto.go
   ↑ 提供加密和解密能力
   ↓ 解密后获取 imageID
models/image.go
   ↑ 模拟数据库，查找图片路径
storage/uploads/
   ↓ 图片文件存储位置

1.先写对原始信息的加密函数。
！常用加密函数为数据类型为：byte[]
func Encrypt(data []byte) []byte

参考网路：https://blog.csdn.net/weixin_57052634/article/details/146313875?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-146313875-blog-126015480.235^v43^pc_blog_bottom_relevance_base9&spm=1001.2101.3001.4242.2&utm_relevant_index=3
使用AES-CBC加密：

明文
 ↓
PKCS7 Padding
 ↓
随机生成 IV（16字节）
 ↓
AES-CBC 加密（key + IV）
 ↓
[IV][密文]

接口 A：上传图片 → 加密 → 存图片 → 返回加密信息
POST /encrypt
请求内容：图片文件
处理步骤：
读取图片内容
AES加密
保存原图
把加密后的数据 Base64 编码成文本返回
把文件路径和加密信息存数据库

接口 B：输入加密文本 → 解密 → 查DB → 返回图片URL
POST /decrypt
请求内容：加密文本
处理步骤：
解 Base64
AES 解密
得到原始图片的名称和二进制数据流
响应头：动态读取文件格式（filename）
并加载到客户端（http.ServeContent内置库）


用 SQLite 数据库存储文件名 + 加密文本（或 ID 对应关系）


初步完成了从自己的库里面读取图片后，是不是可以尝试通过url连接去访问其他服务器的图片（爬虫？）
以及可能会被ban的可能性，为什么。

1.utils/crypto.go中：定义了加密解密功能函数，AES-CBC
2.在controllers/encrpypt中：

ctx.Query("filename")    url---http://localhost:8080/encrypt?filename=images2.jfif

定义密钥，由url获取的文件名读取文件内容，加密，并存储到DB(GORM)--(SQLITE)

3.在controllers/decrpypt中：

通过id读取在表中的实例，并解密（图片信息和filename），读取图片文件

[密文Base64] → 解码Base64 → 解密AES → 拆出 filename + imageBytes
      ↓
[还原文件]
      ↓
http.ServeContent(ctx.Writer, ctx.Request, filename, time.Now(), bytes.NewReader(imageBytes))
      ↓
浏览器访问：http://localhost:8080/decrypt?id=3
